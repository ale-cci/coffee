import "./std/testing" as testing
import "./std/string" as string
import "./std/sys" as sys
import "./std/io" as io
import "./std/ioutil" as ioutil

import "./errors" as errors
import "./parser" as parser
import "./parser.debug" as parser_debug
import "./peeker" as peeker
import "./lexer" as lexer
import "./syntax" as syntax


int main() {
    t := testing.init("./syntax.test.bn")

    testing.setup(t, "grammar parses empty function")
    testing.run(t, test_grammar_parses_empty_function(t))

    testing.setup(t, "test_parses_atom")
    testing.run(t, test_parses_atom(t))

    testing.setup(t, "test_parses_struct")
    testing.run(t, test_parses_struct(t))

    testing.setup(t, "test_parses_function_arguments")
    testing.run(t, test_parses_function_arguments(t))

    testing.setup(t, "test_parses_type_alias")
    testing.run(t, test_parses_type_alias(t))

    testing.setup(t, "test_parses_global_variable")
    testing.run(t, test_parses_global_variable(t))

    testing.setup(t, "test_parses_variable_addr")
    testing.run(t, test_parses_variable_addr(t))

    testing.setup(t, "test_parses_function_call")
    testing.run(t, test_parses_function_call(t))

    testing.setup(t, "test_parses_function_call_arguments")
    testing.run(t, test_parses_function_call_arguments(t))

    testing.setup(t, "test_parses_function_definition")
    testing.run(t, test_parses_function_definition(t))

    testing.cleanup(t)
    return 0
}

parser.ParseResult* match_rule(chr* rule_name, chr* program) {
    grammar_file := ioutil.str_as_file(syntax.grammar())
    ctx := parser.new_context(grammar_file)
    grammar := parser.parse_grammar(ctx)


    sys.free((chr*) ctx)

    tmp := testing.tempfile(program)
    fd := io.fileno(tmp)
    p := peeker.new(fd)
    tokens := lexer.tokenize(p, false)

    sys.free((chr*) p)
    res := parser.ast(grammar, rule_name, tokens)
    sys.free((chr*) tokens)
    sys.free((chr*) grammar)

    return res
}


parser.Node* new_node(chr* type, value, int line, char_of_line, parser.Node* next, children) {
    parser.Node* n = (parser.Node*) sys.malloc(sizeof(parser.Node))
    n.type = type
    n.value = value
    n.next = next
    n.children = children
    n.line = line
    n.char_of_line = char_of_line

    for bc := children; bc != null; bc = bc.next {
        bc.parent = n
    }
    return n
}

void assert_node_eq(testing.T* t, parser.Node* a, b) {
    repr_a := parser_debug.node_to_string(a)
    repr_b := parser_debug.node_to_string(b)

    testing.assert_equal_str(t, repr_a, repr_b)

    sys.free(repr_a)
    sys.free(repr_b)
}


int test_grammar_parses_empty_function(testing.T* t) {
    res := match_rule("type", "void")

    if res.err != null {
        errors.report(res.err)
        sys.free((chr*) res.err)
        sys.free((chr*) res)
        return 0
    }

    void_type := new_node("WORD", "void", 1, 1, (parser.Node*) null, (parser.Node*) null)
    n := new_node("type", (chr*) null, 1, 1, (parser.Node*) null, void_type)

    assert_node_eq(t, res.node, n)
    sys.free((chr*) res)
    return 0
}


int test_parses_atom(testing.T* t) {
    res := match_rule("assignable", "a.b[3]")
    testing.assert_null(t, (chr*) res.err)

    if res.err != null {
        errors.report(res.err)
        sys.free((chr*) res.err)
        sys.free((chr*) res)
        return 0
    }

    -- repr := node_to_string(res.node)
    -- io.printf("Value of node: %s\n", repr)
    -- sys.free((chr*) res)
    return 0
}

int test_parses_struct(testing.T* t) {
    res := match_rule("structdef", "struct {\nint t,\n}")
    testing.assert_null(t, (chr*) res.err)

    if res.err != null {
        errors.report(res.err)
        sys.free((chr*) res.err)
        sys.free((chr*) res)
        return 0
    }

    return 0
}


int test_parses_function_arguments(testing.T* t) {
    res := match_rule("fn_params", "int t, chr b")
    testing.assert_null(t, (chr*) res.err)
    return 0
}

int test_parses_type_alias(testing.T* t) {
    res := match_rule("statement", "alias t = struct{ \n int t, \n \n int j,\n}")
    testing.assert_null(t, (chr*) res.err)
    return 0
}

int test_parses_global_variable(testing.T* t) {
    -- grammar_file := io.fopen("syntax.txt", "r")
    -- ctx := parser.new_context(grammar_file)
    -- grammar := parser.parse_grammar(ctx)
    -- r := parser._find_rule(grammar, "structdef")
    -- parser.debug_matcher(r.matcher)
    -- io.printf("\n")

    res := match_rule("statement", "int something = 3")
    testing.assert_null(t, (chr*) res.err)
    return 0
}

int test_parses_variable_addr(testing.T* t) {
    res := match_rule("assignable", "&a.b")
    testing.assert_null(t, (chr*) res.err)
    return 0
}


int test_parses_function_call(testing.T* t) {
    res := match_rule("assignable", "c(a)")
    testing.assert_null(t, (chr*) res.err)
    return 0
}


int test_parses_function_call_arguments(testing.T* t) {
    res := match_rule("fn_args", "a")
    testing.assert_null(t, (chr*) res.err)
    return 0
}

int test_parses_function_definition(testing.T* t) {
    res := match_rule("fn_params", "str format, ... args")
    testing.assert_null(t, (chr*) res.err)

    if res.err != null {
        errors.freport(t.out, res.err)
    }
    return 0
}

