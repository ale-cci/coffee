import "../std/string" as string
import "../std/io" as io
import "../std/sys" as sys


chr* string_to_llvm(chr* text) {
    str_len := string.strlen(text)

    struct {
        int size,
        int idx,
        chr* buf,
    } dest_string

    dest_string.size = str_len
    dest_string.idx = 0
    dest_string.buf = sys.malloc(str_len)


    -- ignore start and end quotes for string length calculation
    for i := 1; i < str_len -1; i = i + 1 {
        -- append character to string
        if dest_string.idx == dest_string.size -1 {
            dest_string.buf = sys.realloc(dest_string.buf, dest_string.size * 2)
        }

        if text[i] == '"' {
            dest_string.buf[dest_string.idx] = '\5C'
            dest_string.idx = dest_string.idx + 1
            dest_string.buf[dest_string.idx] = '2'
            dest_string.idx = dest_string.idx + 1
            dest_string.buf[dest_string.idx] = '2'
        } elif text[i] == '\5C' {
            if text[i + 1] == 'n' | text[i + 1] == 'N' {
                dest_string.buf[dest_string.idx] = '\5C'
                dest_string.idx = dest_string.idx + 1
                dest_string.buf[dest_string.idx] = '0'
                dest_string.idx = dest_string.idx + 1
                dest_string.buf[dest_string.idx] = 'A'
                i = i + 1
            } elif text[i + 1] == '\5C' {
                dest_string.buf[dest_string.idx] = '\5C'
                dest_string.idx = dest_string.idx + 1
                dest_string.buf[dest_string.idx] = '5'
                dest_string.idx = dest_string.idx + 1
                dest_string.buf[dest_string.idx] = 'C'
                i = i + 1
            } elif text[i + 1] == 'x' {
                -- hex character
                i = i + 2
                dest_string.buf[dest_string.idx] = '\5C'
                dest_string.idx = dest_string.idx + 1
                dest_string.buf[dest_string.idx] = string.toupper(text[i])
                i = i + 1
                dest_string.idx = dest_string.idx + 1
                dest_string.buf[dest_string.idx] = string.toupper(text[i])
            } else {
                dest_string.buf[dest_string.idx] = text[i]
            }
        } else {
            dest_string.buf[dest_string.idx] = text[i]
        }

        dest_string.idx = dest_string.idx + 1
    }

    -- add string terminator
    dest_string.buf[dest_string.idx] = '\00'

    chr* buf
    io.asprintf(&buf, "c\22%s\5C00\22", dest_string.buf)
    sys.free(dest_string.buf)
    return buf
}

int llvm_str_len(chr* text) {
    int len = 0
    for i := 2 ; text[i] != '\00' ; i = i + 1 {
        if text[i] == '\5C' {
            i = i + 2
        }
        len = len + 1
    }
    return len -1
}


chr* chr_to_llvm(chr* chr_repr) {
    int intval
    chr* buf
    chr chrval

    chr_len := string.strlen(chr_repr)
    if chr_len == 6 {
        io.sscanf(chr_repr, "'\x5Cx%x'", &intval)
        io.asprintf(&buf, "%d", intval)
    } elif chr_len == 5 {
        -- CHR in the form of "\XX" (hex numbers)
        io.sscanf(chr_repr, "'\x5C%x'", &intval)
        io.asprintf(&buf, "%d", intval)

    } elif chr_len == 4 {
        io.sscanf(chr_repr, "'\x5C%c'", &chrval)
        if chrval == 'n' {
            buf = "10"
        } else {
            return (chr*) null
        }
    } elif chr_len == 3 {
        -- CHR in the form of "X" (single character)
        io.sscanf(chr_repr, "'%c'", &intval)
        io.asprintf(&buf, "%d", intval)
    } else {
        return (chr*) null
    }
    return buf
}
