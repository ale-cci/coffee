import "./std/io" as io
import "./std/sys" as sys
import "./std/string" as string


str grammar() {
    return `
start: (head_comment)? (statement)*

head_comment: "#" (OPERATOR | WORD)* NL

statement: (NL | import | typealias | extern | global | function )

typealias: "alias" WORD "=" type

extern: "extern" type WORD "(" (fn_params)? ( ")" )

import: "import" STRING "as" WORD

destination: dotted_name ( "[" assignable "]" )*

dotted_name: WORD ( "." WORD )*

boolean: ("true" | "false")

addr_destination: ("&")* (destination)

operator: ( "+" | "/" | "==" | "!=" | "|" | "&" | "<=" | ">=" | "<" | ">" | "*" | "-" | "%")

mono_assignable: ( fn_call | boolean | "null" | addr_destination | NUMBER | CHR | STRING  )

assignable: (cast)? mono_assignable ( operator mono_assignable)*

global: type WORD "=" assignable

cast: "(" type ")"

fn_params: ( type WORD) ("," type WORD | "," WORD )*

function: type WORD "(" (fn_params)? ( ")" block )

structdef: ( "struct" "{" NL ) ( ( type WORD "," NL ) | ( NL ) )* ( "}" )

basic_type: ( "void" | "int" | "bool" | "chr" | "str" | structdef | dotted_name | "..." ) ("[" "]")* ("*")*

type: basic_type (type_trailer)?

type_fn_params: type ( "," type )*

type_trailer: "(" ( type_fn_params )? ( ")" ) (type_trailer)?

if_block: "if" assignable block (elif_block)? (NL)

elif_block: ("elif" assignable block (elif_block)? | else_block)

else_block: "else" block

return: "return" (assignable)? (NL)

declaration: ( type WORD "=" assignable | WORD ":" "=" assignable | type WORD )

assignment: destination "=" assignable

fn_args: assignable ( "," assignable )*

fn_call: (destination "(") (fn_args)? (")")

keyword: ("break" | "continue")

expression: ( if_block | return | keyword | for_loop | assignment | fn_call | declaration | NL )

expressions: (expression)*

block: "{" NL expressions ("}")

for_loop: "for" (declaration | assignment)? (";") (assignable)? (";") (assignment)? block (else_block)?
`
}
