#!/usr/bin/env coffee
import "./std/io" as io
import "./std/ioutil" as ioutil
import "./std/sys" as sys
import "./std/string" as string
import "./std/compile/init" as compile

import "./std/ast/peeker" as peeker
import "./std/ast/parser" as parser
import "./std/ast/errors" as errors
import "./std/ast/lexer" as lexer


bool compile_file(str filename, outname) {
    stderr := io.fdopen(io.STDERR, "w")
    llvm_code := io.tmpfile()
    compiler_ctx := compile.new_context(llvm_code, filename)
    if compile.compile_file(compiler_ctx, (parser.Node*) null, filename) {
        io.fprintf(stderr, "Compilation to llvm interrupted.\0A")
        return false
    }

    -- check for compiler error
    io.fflush(llvm_code)
    llvm_code_size := io.ftell(llvm_code)
    io.rewind(llvm_code)

    cmd := ""
    io.asprintf(&cmd, "tee debug.ll | llc - -o debug.s", outname)
    proc := sys.popen(cmd, "w")

    ioutil.copy(io.fileno(proc), io.fileno(llvm_code))

    if proc == null {
        io.fprintf(stderr, "unable to spawn subprocess\n")
        return false
    }

    if sys.pclose(proc) != 0 {
        io.fprintf(stderr, "error on llc execution\0A")
        return false
    }

    io.asprintf(&cmd, "cc debug.s -o %s", outname, outname)
    cc_proc := sys.popen(cmd, "w")
    if cc_proc == null {
        io.fprintf(stderr, "unable to spawn subprocess\n")
        return false
    }
    if sys.pclose(proc) != 0 {
        io.fprintf(stderr, "error on cc execution")
    } else {
        io.printf("File %s compiled successfully!\0A", outname)
    }

    return true
}


alias Args = struct {
    str action,
    str filename,
    str outname,
    str* argv,
}

int main(int argc, str* argv) {
    args := check_args(argc, argv)

    if compile_file(args.filename, args.outname) == false {
        return 0
    }

    if string.strcmp(args.action, "run") == 0 {
        cmd := ""
        io.asprintf(&cmd, "./%s", args.outname)
        return sys.execvp(cmd, args.argv)
    }

    return 0
}


-- check how the program was called, assuring at least one argument is present in argv
Args check_args(int argc, str* argv) {
    tmpl := "Usage: %s <filename>\n"

    Args args
    if argc < 2 {
        io.printf(tmpl, argv[0])
        sys.exit(1)
    }

    int fp = 1
    args.action = "compile"
    if string.strcmp(argv[1], "run") == 0 {
        args.action = "run"
        fp = 2
    }

    if argc < fp + 1 {
        io.printf(tmpl, argv[0])
        sys.exit(1)
    }

    args.filename = argv[fp]

    ext := sys.splitext(args.filename)
    args.outname = ext.base

    ac := argc - fp + 1
    args.argv = (str*) sys.malloc(8 * ac)

    args.argv[0] = args.outname
    for i := 0; i < argc - fp; i = i + 1 {
        args.argv[i + 1] = argv[fp + i + 1]
    }
    return args
}
