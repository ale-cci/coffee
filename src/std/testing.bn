import "./sys" as sys
import "./string" as string
import "./io" as io
import "./ioutil" as ioutil

alias T = struct {
    bool failure,
    chr* suite_name,
    chr* test_name,
    int test_no,
    int* fds,
    io.File* out,
}
int T_ptr_size = 48


-- initialize test suite for a given file
T* init(chr* filename) {
    T* t = (T*) sys.malloc(T_ptr_size)
    t.suite_name = filename
    t.fds = (int*) sys.malloc(2 * 32)

    stderr := io.fdopen(io.STDERR, "w")
    io.fprintf(stderr, "Running tests in %s\n", filename)
    return t
}


-- prepares `T` data structure for a new test
void setup(T* t, chr* test_name) {
    t.failure = false
    t.test_name = test_name

    sys.assert(sys.pipe(t.fds) >= 0, "unable to open pipe")

    t.test_no = 0
    fds := t.fds
    t.out = io.fdopen(fds[io.STDOUT], "w")
    sys.assert(t.out != null, "unable to open stdout")
}


-- print test outcome
void run(T* t, int _unused) {
    fds := t.fds

    io.fflush(t.out)
    io.close(fds[io.STDOUT])

    stderr := io.fdopen(io.STDERR, "w")
    if t.failure {
        io.fprintf(stderr, "[ \x1B[31mERROR\x1B[0m ] %s: \n", t.test_name)

        out := ioutil.readall(fds[io.STDIN])
        io.write(io.STDERR, out, string.strlen(out))
        io.write(io.STDERR, "\n", 1)
    } elif t.test_no == 0 {
        io.fprintf(stderr, "[ \x1b[33mWARN\x1b[0m  ] %s: no asserts found\n", t.test_name)

    } else {
        io.fprintf(stderr, "[ \x1b[32mOK\x1b[0m    ] %s\n", t.test_name)
    }
    io.close(fds[io.STDIN])
}


void cleanup(T* t) {
    io.fclose(t.out)
    sys.free((chr*) t.fds)
    sys.free((chr*) t)
}


void fail(T* t) {
    t.failure = true
    io.fprintf(t.out, "#%d: ", t.test_no)
}


-- assert functions
void assert_equal_int(T* t, int expect, got) {
    t.test_no = t.test_no + 1
    if expect != got {
        fail(t)
        io.fprintf(t.out, "expected '%d', got '%d'\n", expect, got)
    }
}

void assert_equal_chr(T* t, chr expect, got) {
    t.test_no = t.test_no + 1
    if expect != got {
        fail(t)
        io.fprintf(t.out, "expected '%c' (%d), got '%c' (%d)\n", expect, expect, got, got)
    }
}

void assert_true(T* t, chr* label, bool val) {
    t.test_no = t.test_no + 1
    if val == false {
        fail(t)
        io.fprintf(t.out, "value %s is not truthy\n", label)
    }
}

void assert_false(T* t, chr* label, bool val) {
    t.test_no = t.test_no + 1
    if val == true {
        fail(t)
        io.fprintf(t.out, "value %s is not false\n", label)
    }
}


void assert_equal_str(T* t, chr* expect, got) {
    t.test_no = t.test_no + 1
    if got == null {
        fail(t)
        io.fprintf(t.out, "expected '%s', got (null)\n", expect, got)
    } elif string.strcmp(expect, got) != 0 {
        fail(t)
        io.fprintf(t.out, "expected '%s', got '%s'\n", expect, got)
    }
}

void assert_contains_str(T* t, chr* haystack, needle) {
    t.test_no = t.test_no + 1
    if haystack == null {
        fail(t)
        io.fprintf(t.out, "expected haystack, not to be null, got %s instead\n", haystack)
    } elif string.strstr(haystack, needle) == null {
        fail(t)
        io.fprintf(t.out, "'%s' not found in '%s'\n", needle, haystack)
    }
}

void assert_null(T* t, chr* ptr) {
    t.test_no = t.test_no + 1
    if ptr != null {
        fail(t)
        io.fprintf(t.out, "expected null pointer, got: %p\n", ptr)
    }
}

void assert_not_null(T* t, chr* ptr) {
    t.test_no = t.test_no + 1
    if ptr == null {
        fail(t)
        io.fprintf(t.out, "expected pointer, got: (null)\n")
    }
}

io.File* tempfile(chr* content) {
    fd := io.tmpfile()
    io.fprintf(fd, content)
    io.rewind(fd)
    return fd
}
