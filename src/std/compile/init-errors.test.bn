import "../testing" as testing
import "../string" as string
import "../io" as io
import "../ioutil" as ioutil
import "../sys" as sys

import "../ast/parser" as parser
import "../ast/peeker" as peeker
import "../ast/lexer" as lexer
import "../ast/errors" as errors
import "../ast/syntax" as syntax

import "./init" as compile
import "./types" as types


int main() {
    t := testing.init("compile/init-errors.test.bn")

    testing.setup(t, "test_signals_missing_for_condition")
    testing.run(t, test_signals_missing_for_condition(t))

    testing.setup(t, "test_error_if_break_is_used_in_non_for_context")
    testing.run(t, test_error_if_break_is_used_in_non_for_context(t))

    testing.setup(t, "test_error_if_continue_is_used_in_non_for_context")
    testing.run(t, test_error_if_continue_is_used_in_non_for_context(t))

    testing.setup(t, "test_fails_if_variable_is_redefined")
    testing.run(t, test_fails_if_variable_is_redefined(t))

    testing.setup(t, "test_respects_lexer_errors")
    testing.run(t, test_respects_lexer_errors(t))

    testing.setup(t, "test_prevent_inclusion_from_files_from_root_fs")
    testing.run(t, test_prevent_inclusion_from_files_from_root_fs(t))

    testing.setup(t, "test_prevent_definitions_of_functions_with_same_name")
    testing.run(t, test_prevent_definitions_of_functions_with_same_name(t))

    testing.setup(t, "test_check_functions_are_called_with_correct_types")
    testing.run(t, test_check_functions_are_called_with_correct_types(t))

    testing.setup(t, "test_check_if_function_is_called_with_too_much_arguments")
    testing.run(t, test_check_if_function_is_called_with_too_much_arguments(t))

    testing.setup(t, "test_check_if_function_is_called_with_too_few_arguments")
    testing.run(t, test_check_if_function_is_called_with_too_few_arguments(t))

    testing.setup(t, "test_check_if_no_arguments_are_passed_to_function_that_requires_at_least_one")
    testing.run(t, test_check_if_no_arguments_are_passed_to_function_that_requires_at_least_one(t))

    testing.setup(t, "test_does_not_crash_on_undefined_var")
    testing.run(t, test_does_not_crash_on_undefined_var(t))

    testing.cleanup(t)
    return 0
}

int test_does_not_crash_on_undefined_var(testing.T* t) {
    ctx := compile_str(`
void fn() {
    struct {
        int a,
    } b

    b.a = "s"
}`)

    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        chr* got
        testing.assert_contains_str(t, ctx.errors.err.message, "cannot assign type")
    }
    return 0
}


int test_signals_missing_for_condition(testing.T* t) {
    ctx := compile_str(`
void fn() {
    for ;; {
    }
}
`)
    testing.assert_not_null(t, (chr*) ctx.errors)

    return 0
}


int test_error_if_break_is_used_in_non_for_context(testing.T* t) {
    ctx := compile_str(`
void fn() {
    break
}
`)
    testing.assert_not_null(t, (chr*) ctx.errors)

    return 0
}


int test_error_if_continue_is_used_in_non_for_context(testing.T* t) {
    ctx := compile_str(`
void fn() {
    continue
}
`)
    testing.assert_not_null(t, (chr*) ctx.errors)

    return 0
}

int test_fails_if_variable_is_redefined(testing.T* t) {
    ctx := compile_str(`
void fn() {
    i := 1
    i := 2
}
`)

    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        chr* got
        testing.assert_contains_str(t, ctx.errors.err.message, "already defined")
    }

    return 0
}

int test_prevent_inclusion_from_files_from_root_fs(testing.T* t) {
    ctx := compile_str(`
import "/etc/shadow" as x
`)
    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        testing.assert_contains_str(t, ctx.errors.err.message, "must not start with '/'")
    }
    return 0
}

int test_prevent_definitions_of_functions_with_same_name(testing.T* t) {
    ctx := compile_str(`
void fnx() {
}
void fnx() {
}`)
    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        testing.assert_contains_str(t, ctx.errors.err.message, "already defined")
    }
    return 0
}


int test_respects_lexer_errors(testing.T* t) {
    ctx := compile.new_context(io.tmpfile(), "./std/compile/__test__/test-dir/file-with-errors")
    has_error := compile.compile_file(ctx, (parser.Node*) null, "./std/compile/__test__/test-dir/file-with-errors.bn")
    testing.assert_true(t, "compilation error", has_error)
    return 0
}

int test_check_functions_are_called_with_correct_types(testing.T* t) {
    ctx := compile_str(`
void fn(int a, chr b) {
}

void main() {
    fn(1, "c")
}
`)
    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        testing.assert_contains_str(t, ctx.errors.err.message, "Type for argument 2 does not match")
    }
    return 0
}

int test_check_if_function_is_called_with_too_much_arguments(testing.T* t) {
    ctx := compile_str(`
void fn() {
}

void main() {
    fn(1)
}`)
    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        testing.assert_contains_str(t, ctx.errors.err.message, "Function 'fn' takes 0 arguments, 1 given")
    }
    return 0
}

int test_check_if_function_is_called_with_too_few_arguments(testing.T* t) {
    ctx := compile_str(`
void fn(int a, b) {
}

void main() {
    fn(1)
}`)
    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        testing.assert_contains_str(t, ctx.errors.err.message, "Function 'fn' takes 2 arguments, 1 given")
    }
    return 0
}


int test_check_if_no_arguments_are_passed_to_function_that_requires_at_least_one(testing.T* t) {
    ctx := compile_str(`
void fn(int a, b) {
}

void main() {
    fn()
}`)
    testing.assert_not_null(t, (chr*) ctx.errors)
    if ctx.errors != null {
        testing.assert_contains_str(t, ctx.errors.err.message, "Function 'fn' takes 2 arguments, 0 given")
    }
    return 0
}

types.CompilerCtx* compile_str(str file_content) {
    filename := ""

    grammar_file := ioutil.str_as_file(syntax.grammar())
    if grammar_file == null {
        return (types.CompilerCtx*) null
    }
    grammar_ctx := parser.new_context(grammar_file)
    grammar := parser.parse_grammar(grammar_ctx)
    fd := ioutil.str_as_file(file_content)

    p := peeker.new(io.fileno(fd))
    p.filename = filename
    tokens := lexer.tokenize(p, false)
    ast := parser.ast(grammar, "start", tokens)
    ctx := compile.new_context(io.tmpfile(), filename)

    if ast.err != null {
        compile.append_error(ctx, ast.err)
    } else {
        compile.compile_ast(ctx, ast.node)
    }
    io.fclose(ctx.ir)

    return ctx
}
