import "../sys" as sys
import "../io" as io
import "./lexer" as lexer

-- error reporting message
alias Error = struct {
    int line,
    int char_of_line,
    chr* filename,
    chr* message,
}
int Error_size = 24


Error* from(lexer.Token* t, chr* message) {
    return new((chr*) t.filename, t.line, t.char_of_line, message)
}

Error* new(chr* filename, int line, char_of_line, chr* message) {
    Error* e = (Error*) sys.malloc(Error_size)
    e.line = line
    e.char_of_line = char_of_line
    e.message = message
    e.filename = filename
    return e
}

str _context(Error* e) {
    str[] lines
    fd := io.fopen(e.filename, "r")
    if fd == null {
        -- failed to open file, skipping context
        return ""
    }

    int curline = 0
    int context_size = 2

    str buf = (chr*) null
    int bufsize
    for curline := 0; curline <= e.line + context_size ; curline = curline + 1 {
        if io.getline(&buf, &bufsize, fd) < 0 {
            break
        }

        if curline >= e.line - context_size & curline < e.line + context_size {
            lines = append(lines, "")
            io.asprintf(&lines[len(lines) -1], "%4d | %s", curline + 1, buf)
        }
    }
    io.fclose(fd)

    buf = ""
    for i := 0; i < len(lines); i = i + 1 {
        io.asprintf(&buf, "%s%s", buf, lines[i])
    }

    io.asprintf(&buf, "\n%s\n", buf)
    return buf
}

str to_string(Error* e) {
    buf := ""
    ctx := _context(e)
    io.asprintf(&buf, "[%s %d:%d] error: %s\n%s", e.filename, e.line, e.char_of_line, e.message, ctx)
    return buf
}

void report(Error* e) {
    io.printf(to_string(e))
}

void freport(io.File* fd, Error* e) {
    io.fprintf(fd, to_string(e))
}
