import "../io" as io
import "../sys" as sys
import "../testing" as testing
import "./peeker" as peeker


int main() {
    t := testing.init("peeker.test.bn")

    testing.setup(t, "reads characters from file descriptor")
    testing.run(t, peeker_reads_chars(t))


    testing.setup(t, "peeker can seek in file position")
    testing.run(t, peeker_can_seek(t))

    testing.setup(t, "peeker keeps track of current cursor position")
    testing.run(t, peeker_keeps_track_of_current_cursor_position(t))

    testing.setup(t, "peeker_counts_lines")
    testing.run(t, peeker_counts_lines(t))

    testing.setup(t, "peeker_counts_character_position_of_line")
    testing.run(t, peeker_counts_character_position_of_line(t))

    testing.cleanup(t)
    return 0
}


int peeker_reads_chars(testing.T* t) {
    -- write to input pipe, read from output pipe
    fd := testing.tempfile("abc")
    f_no := io.fileno(fd)

    p := peeker.new(f_no)

    testing.assert_equal_chr(t, 'a',   peeker.read(p))
    testing.assert_equal_chr(t, 'b',   peeker.read(p))
    testing.assert_equal_chr(t, 'c',   peeker.read(p))
    testing.assert_equal_chr(t, '\x00', peeker.read(p))
    testing.assert_equal_chr(t, '\x00', peeker.read(p))
    testing.assert_true(t, "reach EOF", p.eof)

    sys.free((chr*) p)
    return 0
}

int peeker_can_seek(testing.T* t) {
    fd := testing.tempfile("abc")
    f_no := io.fileno(fd)

    p := peeker.new(f_no)
    peeker.read(p)
    peeker.seek(p, 0)

    testing.assert_equal_chr(t, 'a', peeker.read(p))

    sys.free((chr*) p)
    return 0
}

int peeker_keeps_track_of_current_cursor_position(testing.T* t) {
    fd := testing.tempfile("123")
    f_no := io.fileno(fd)

    p := peeker.new(f_no)
    testing.assert_equal_int(t, 0, p.pos)
    peeker.read(p)
    testing.assert_equal_int(t, 1, p.pos)
    peeker.read(p)
    peeker.read(p)
    peeker.read(p)
    peeker.read(p)
    testing.assert_equal_int(t, 3, p.pos)

    sys.free((chr*) p)
    return 0
}

int peeker_counts_lines(testing.T* t) {
    fd := testing.tempfile("1\n3")
    f_no := io.fileno(fd)

    p := peeker.new(f_no)
    testing.assert_equal_int(t, p.line, 1)
    peeker.read(p)
    peeker.read(p)
    testing.assert_equal_int(t, p.line, 1)
    peeker.read(p)
    testing.assert_equal_int(t, p.line, 2)

    sys.free((chr*) p)
    return 0
}

int peeker_counts_character_position_of_line(testing.T* t) {
    fd := testing.tempfile("1\n3")
    f_no := io.fileno(fd)

    p := peeker.new(f_no)
    testing.assert_equal_int(t, p.char_of_line, 0)
    peeker.read(p)
    testing.assert_equal_int(t, p.char_of_line, 1)
    peeker.read(p)
    testing.assert_equal_int(t, p.char_of_line, 2)
    peeker.read(p)
    testing.assert_equal_int(t, p.char_of_line, 1)
    peeker.read(p)
    peeker.read(p)
    peeker.read(p)
    testing.assert_equal_int(t, p.char_of_line, 1)

    sys.free((chr*) p)
    return 0
}
