import "./io" as io
import "./string" as string

extern void exit(int status_code)

-- for dynamic memory allocation
extern chr* malloc(int size)

-- resize allocated memory buffer
extern chr* realloc(chr* ptr, int size)

-- free dynamic memory allocation
extern void free(chr* ptr)

int ptr_size = 8

void assert(bool condition, str message) {
    if condition != true {
        int size = string.strlen(message)
        io.write(1, message, size)
        exit(1)
    }
}

-- create new process `man 2 fork`
extern int fork()


extern int waitpid(int pid, int* stat_loc, int options)


extern chr* memmove(chr* dest, chr* src, int n)

chr* memset(chr* buf, chr val, int n) {
    for i := 0; i < n; i = i + 1 {
        buf[i] = val
    }
    return buf
}


extern int pipe(int* fds)

-- popen, pclose - pipe stream to or from a process
extern io.File* popen(str command, str type)
extern int pclose(io.File* stream)

-- returns directory name of path, libc `dirname` seems not to have a consistent behaviour
-- between different architectures.
str dirname(chr* path) {
    if path == null {
        return (chr*) null
    }

    int end_idx
    stop := false
    for end_idx = string.strlen(path) -1; end_idx > 0 & stop == false; {
        if path[end_idx] == '/' {
            stop = true
        } else {
            end_idx = end_idx - 1
        }
    }

    path_dirname := (chr*) malloc(end_idx + 1)
    for i := 0; i < end_idx; i = i + 1 {
        path_dirname[i] = path[i]
    }
    path_dirname[end_idx] = '\00'
    return path_dirname
}
-- extern str dirname(str path)

extern str basename(str path)

extern chr* getcwd(chr* buf, int size)

extern chr* realpath(chr* filename, chr* resolved_name)

extern chr* getenv(chr* name)
