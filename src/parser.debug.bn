import "./std/io" as io
import "./std/sys" as sys
import "./parser" as parser


chr* node_to_string(parser.Node* n) {
    tmp := io.tmpfile()
    _node_to_string(n, tmp, 1)
    str_len := io.ftell(tmp)

    tmp_fd := io.fileno(tmp)
    io.lseek(tmp_fd, 0, SEEK_SET)


    chr* buf = sys.malloc(str_len)
    read := io.read(tmp_fd, buf, str_len)

    if read != str_len {
        sys.free(buf)
        buf = null
    }
    return buf
}

void _print_indent(io.File* stdout, int indent){
    io.fprintf(stdout, "\0A")
    for i := 0; i < indent; i = i + 1 {
        io.fprintf(stdout, "  ")
    }
}

void _node_to_string(parse.Node* node, io.File* stdout, int indent) {
    if node == null {
        io.fprintf(stdout, "(null)")
        return
    }
    io.fprintf(stdout, "{")
    _print_indent(stdout, indent)
    io.fprintf(stdout, "\22type\22: \22%s\22", node.type)
    _print_indent(stdout, indent)
    io.fprintf(stdout, "\22value\22: %s", node.value)
    _print_indent(stdout, indent)
    io.fprintf(stdout, "\22line\22: %d", node.line)
    _print_indent(stdout, indent)
    io.fprintf(stdout, "\22char_of_line\22: %d", node.char_of_line)

    -- for now avoid recursive call loop
    -- _print_indent(stdout, indent)
    -- io.fprintf(stdout, "\22parent\22: ")
    -- _node_to_string(node.parent, stdout, indent + 1)

    _print_indent(stdout, indent)
    io.fprintf(stdout, "\22next\22: ")
    _node_to_string(node.next, stdout, indent + 1)

    _print_indent(stdout, indent)
    io.fprintf(stdout, "\22children\22: ")
    _node_to_string(node.children, stdout, indent + 1)

    _print_indent(stdout, indent - 1)
    io.fprintf(stdout, "}")
}


